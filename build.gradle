/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/java_library_plugin.html
 */

plugins {
    id 'java-library'
    id 'java-library-distribution'
    id 'eclipse'
    id 'jacoco'
    id 'signing'
    id 'net.ltgt.apt' version '0.17'
    id 'org.sonarqube' version '2.6'
}

sourceCompatibility = 1.8

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.google.code.gson:gson:2.8.5'

    compileOnly 'org.projectlombok:lombok:1.18.0'
    annotationProcessor 'org.projectlombok:lombok:1.18.0'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    testImplementation 'org.skyscreamer:jsonassert:1.2.3'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

distributions {
    main { baseName = 'oauth-apis-client' }
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

tasks.withType(Jar) { // includes War and Ear
    doFirst {
        def classPath, javaVersion
        if (!configurations.runtime.isEmpty()) {
            classPath = configurations.runtime.files.collect { it.getName() }.join(' ')
        }
        javaVersion = System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        
        println '- Project Version:  ' + project.version
        println '- Semantic Version: ' + project.semanticVersion
        println '- Build Number:     ' + project.buildNumber
        println '- Java Version:     ' + javaVersion
        
        manifest {
            attributes(
                (java.util.jar.Attributes.Name.MANIFEST_VERSION.toString()): '1.0',
                (java.util.jar.Attributes.Name.IMPLEMENTATION_TITLE.toString()): "${title}",
                (java.util.jar.Attributes.Name.IMPLEMENTATION_VENDOR.toString()): "${vendor}",
                (java.util.jar.Attributes.Name.IMPLEMENTATION_VERSION.toString()): "${buildNumber}",
                (java.util.jar.Attributes.Name.SIGNATURE_VERSION.toString()): "${buildHash}",
                (java.util.jar.Attributes.Name.SPECIFICATION_TITLE.toString()): "${title}",
                (java.util.jar.Attributes.Name.SPECIFICATION_VENDOR.toString()): "${vendor}",
                (java.util.jar.Attributes.Name.SPECIFICATION_VERSION.toString()): "${version}-${semanticVersion}",
                'Build-Date': new Date(),
                'Build-By': "${buildBy}",
                'Java-Version': "${javaVersion}",
                'Class-Path': "${classPath}"
            )
        }
    }
}