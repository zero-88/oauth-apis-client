package com.zero.oauth.client.core.oauth1;

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

import com.zero.oauth.client.core.PropertyModel;
import com.zero.oauth.client.type.FlowStep;
import com.zero.oauth.client.type.OAuthVersion;

import lombok.Getter;

/**
 * It is model to define an OAuth parameter when sending request OAuth server.
 *
 * @see PropertyModel
 */
@Getter
public final class OAuth1RequestParam extends PropertyModel {

    /**
     * Realm
     */
    public static final OAuth1RequestParam REALM = new OAuth1RequestParam("realm").addStep(FlowStep.INIT).require();

    /**
     * An absolute URI back to which the server will redirect the resource owner when the Resource Owner Authorization
     * step is completed.
     */
    public static final OAuth1RequestParam REDIRECT_URI = new OAuth1RequestParam("oauth_callback").addStep(FlowStep.INIT)
                                                                                                  .require();

    /**
     * The public identifier for the application, obtained when the developer first registered the application.
     */
    public static final OAuth1RequestParam CONSUMER_KEY = new OAuth1RequestParam("oauth_consumer_key").require();

    /**
     * The name of the signature method used by the client to sign the request.
     */
    public static final OAuth1RequestParam SIGNATURE_METHOD = new OAuth1RequestParam("oauth_signature_method");
    /**
     * The client generates a signature and use it together with {@link #SIGNATURE_METHOD}.
     */
    public static final OAuth1RequestParam SIGNATURE = new OAuth1RequestParam("oauth_signature");

    /**
     * The timestamp is expressed in the number of seconds since January 1, 1970 00:00:00 GMT. The timestamp value MUST
     * be a positive integer and MUST be equal or greater than the timestamp used in previous
     * requests.
     */
    public static final OAuth1RequestParam TIMESTAMP = new OAuth1RequestParam("oauth_timestamp").require();
    /**
     * A nonce is a random string, uniquely with that {@link #TIMESTAMP} generated by the client to allow the server to
     * verify that a request has never been made before and helps prevent replay attacks when requests are made over a
     * non-secure channel.
     */
    public static final OAuth1RequestParam NONCE = new OAuth1RequestParam("oauth_nonce").require();

    /**
     * If present, value MUST be <code>1.0</code>
     */
    public static final OAuth1RequestParam VERSION = new OAuth1RequestParam("oauth_version").defaultValue("1.0");

    /**
     * The temporary credentials token,
     */
    public static final OAuth1RequestParam REQUEST_TOKEN = new OAuth1RequestParam("oauth_token").addStep(FlowStep.AUTHORIZE)
                                                                                                .addStep(FlowStep.FETCH_TOKEN)
                                                                                                .require();
    /**
     * The verification code.
     */
    public static final OAuth1RequestParam OAUTH_VERIFIER = new OAuth1RequestParam("oauth_verifier").addStep(FlowStep.AUTHORIZE)
                                                                                                    .addStep(FlowStep.FETCH_TOKEN)
                                                                                                    .require();

    /**
     * Used by the Consumer(client) to access the Protected Resources on behalf of the Resource Owner.
     */
    public static final OAuth1RequestParam ACCESS_TOKEN = new OAuth1RequestParam("oauth_token").addStep(FlowStep.ACCESS_RESOURCE)
                                                                                               .require();

    private final Set<FlowStep> steps = new HashSet<>();

    public OAuth1RequestParam(String name) {
        super(OAuthVersion.V1, name);
    }

    public OAuth1RequestParam addStep(FlowStep step) {
        this.steps.add(Objects.requireNonNull(step, "OAuth flow step cannot be null"));
        return this;
    }
}
